---
title: "Project title"
subtitle: "STA/ISS 313 - Spring 2023 - Project 1"
author: "Viz Villains- Christopher Tsai, Chris Liang, Jason Zhang, Kevin Ordet"
title-slide-attributes:
  data-background-image: images/watercolour_sys02_img34_teacup-ocean.jpg
  data-background-size: stretch
  data-slide-number: none
format: revealjs
editor: visual
execute:
  echo: false
---

```{r load-packages, message = F, include = F, warning = F}

# Add any additional packages you need to this chunk
# Remove any packages from this list that you're not using
library(tidyverse)
library(broom)
library(patchwork)
library(dplyr)
library(knitr)
library(lubridate)
library(ggforce)
library(grid)
library(gridExtra)

```

```{r setup, include = F}
# For better figure resolution
knitr::opts_chunk$set(
  fig.retina = 3, 
  dpi = 300, 
  fig.width = 6, 
  fig.asp = 0.618, 
  out.width = "70%"
  )
```

```{r load-data, include = F, warning = F}
horror_movies <- read.csv("data/horror_movies.csv")
```

#### Analysis plan question 1:

We know the first question is vague and it is purposely so, but we hope to make it more clear what we're trying to answer via our analysis and data visualizations. When we say "environment", we mean the context of time of release, as the year of release is linked to different economic environments, different budgets for entertainment, different social norms and audience reception to horror, etc.

Our first plan of action is to create a visualization that will look at how the popularity of horror movies have changed overtime. We will use the `popularity` and `release_date` variables for this visualization. For this visualization, we can use geom_point() to create a scatterplot with the x-axis being the release_date, and the y-axis being the popularity of the horror movie. Then, we can add geom_smooth() to show a trend line. We can also create a line graph to show popularity of horror movies over time using geom_line().

Another visualization will look at the same thing, but group by whether the movie is low budget or high budget (have high budget horror movies increased in popularity over time?). We will have to mutate a new categorical variable and add it to the dataset that determines whether the movie is high or low budget. We will choose a certain cutoff for high or low budget based on some sort of summary statistic of the budgets for movies for that year. Along with that newly mutated variable we will use the popularity and release_date variable. With this plot, we can create two line graphs using geom_line() and set color to the newly mutated categorical variable to indicate whether the movie was high or low budget. We can also once again use geom_point() and geom_smooth() with `release_date` as the x-axis and `popularity` as y-axis, and then either facet by the high/low budget variable, or use color to indicate the high/low budget variable.

Third, we will want to look at how the popularity of horror movies increases or decreases after a high profile horror movie is released (either a highly popular, or high budget film). We will use the variables `popularity`, `release_date`, and `budget` for this analysis. We will mutate a new variable that captures the upper extreme of movies that are either an extremely high budget or an extremely high popularity post release -- this will be a categorical variable of 2 levels, with "high profile" or "normal movie" as levels. We will have to determine some sort of cutoff based on summary statistics or a fitting threshold for what is "high profile". Afterwards, we are using the original geom_line() plot, but we add dashed vertical lines (vline) that are at the x-intercepts for the release date of each movie that was extremely high profile to see if the popularity dips after that high profile movie was released.

Our last rough idea of a visualization we might want to create is one that looks at how the popularity of foreign language horror films has increased or decreased over time. We'll use the `release_date` as the x-axis, the `popularity` as the y-axis, and involve the original_language variable as a differentiator between levels. Here, we can create multiple line graphs using geom_line() with color set to the language of the film to show a difference in popularity of foreign language films over time.

The above plans for visualizations can be tweaked--there are many ways to represent time series data, where the most obvious ones are with scatterplots over time or line graphs over time. However, as we work through our visualizations, we will be able to tweak or add other visualizations to represent the popularity and time trends. Overall, we believe that the rough visualizations above will properly display answers to the the first question.

#### Analysis plan question 2

For the second question, we aim to look at the variable `genre_names`, which includes the genres that the movie falls into. Horror, for obvious reasons, is included in the value for the observations of this variable. On top of that, many observations have extra tagged genres, such as drama, thriller, etc. That variable is currently of type character (a string in R), so we can use a delimiter to separate it into different variables for each sub genre. We intend to make indicator variables: beyond horror, it will be Thriller: 0 or 1, 0 for thriller is not included in the extra genre taglines, 1 for if it is. We'll take the top several genres to make indicator variables and discard the rest that have very few tagged -- let's say "Adventure" is too rare a subgenre taged in genre_names, we'll just make indicator variables for the top X occurring subgenres. How we'll find the top X occurring subgenres will be through using the stringr package to identify if the string value for `genre_names` contains a certain sub-genre, then counting how many occurrences there are for each subgenre, and identifying the top X results.

Afterwards, we can treat these indicator variables as binary categorical variables and create visualizations to compare the indicator variables against reception metrics such as popularity. Using these binary indicator variables can also help us create linear models with binary predictors -- does having a certain subgenre correlate with better reception? This analysis will help us look at differences between subgenres and determine which may be the worst and best in combination with horror.

For visualizations, we can compare the categories of these sub-genres in a few different ways. We will make histograms with geom_histogram(), and faceting by the sub-genre (a bunch of faceting by if sub-genre binary = 1 or 0, then using the patchwork package to compare the different histograms). The baseline histogram will be the distribution of either `popularity` or `revenue` when the movie only has horror as the genre listed, and all other sub-genres have the binary indicator set to 0. Then, based on what our linear model spit out (i.e. ranking the p-values of the sub-genres from most to least significant), we will slowly add on more histograms and compare them to the baseline, then to the baseline plus the sub-genre with the lowest p-value in the model, etc. For example, if we find thriller is the most significant predictor for higher popularity, we'll make a histogram of the distribution of popularity with movies just tagged as horror, then a histogram of the distribution of popularity with movies tagged as horror and thriller, then horror and thriller and drama, etc.

If these histograms prove to not be useful in visualizing the differences in sub-genre reception, we can create boxplots of popularity by sub-genre using geom_boxplot(), creating boxplots for if the subgenre = 1 or 0 (if the movie has that sub-genre tagged or not). Then, we will change the colors of these boxplots to represent the different subgenres, and compare the distribution of these boxplots. There are other things we could try -- density plots using geom_density(), or ridge plots using geom_density_ridges(), from the ggridges package to compare distributions by sub-genre. This question in particular will be hard to determine which visualization will be best to answer the given question until we work through the analysis ourselves in the latter stage of the project.

# Using Quarto for presentations

## Quarto

-   The presentation is created using the Quarto CLI

-   `##` sets the start of a new slide

## Layouts

You can use plain text

-   or bullet points

::: columns
::: {.column width="50%"}
or text in two columns $^*$
:::

::: {.column width="50%"}
-   like
-   this
:::
:::

### 

::: aside
\[\*\] And add footnotes
:::

## Code

```{r mutate-dataset, warning = F}
horror_movies <- horror_movies |>
  mutate(profit = revenue - budget,
         release_date2 = release_date) |>
  separate(release_date2, 
           into = c("release_year", "throwaway"), sep = "-") |>
  mutate(release_date = as.Date(release_date),
         release_year = as.numeric(release_year)) |>
  select(!throwaway)
```

Data on inflation data: https://www.in2013dollars.com/us/inflation/2022?endYear=1950&amount=1

```{r adding-inflation}
inflationdata <- read.csv("data/Dollar_inflation.csv")

inflationdata <- inflationdata |>
  filter(year != 2023) |>
  rename("release_year" = "year",
         "dollar_adjusted_by1950" = "amount")

horror_new <- left_join(horror_movies, inflationdata, by = "release_year")
```

```{r adjusted-profit}
horror_new <- horror_new |>
  mutate(adj_profit2020 = profit/dollar_adjusted_by1950*12.14,
         adj_profit1950 = profit/dollar_adjusted_by1950,
         adj_budget1950 = budget/dollar_adjusted_by1950,
         adj_budget2020 = budget/dollar_adjusted_by1950*12.14,
         prop_profit = adj_profit2020/adj_budget2020) |>
  filter(adj_budget2020 >= 2000000,
         release_year >= 1980)
```

```{r}
bang <- horror_new |>
  filter(release_year < 2000)
```

```{r}
ggplot(horror_new, aes(x = adj_budget2020)) +
  geom_histogram(boundary = 0)

ggplot(horror_new, aes(x = adj_profit2020)) +
  geom_histogram()
```

```{r working-on-it}
horror_new |>
  #filter(adj_profit > 0) |>  
  ggplot(aes(x = release_year, y = adj_profit2020)) +
  geom_point() +
  geom_smooth(se = FALSE, color = "red")
  #coord_cartesian(ylim = c(0, 50000))
```

```{r}

description1 <-
  "Horror Movies saw their popularity peak in 2010. Insidious and Paranormal Activity, both released in 2010 saw the highest dollars of profit per dollars of budget of all Horror Movies between 1980 and 2022." |> 
  str_wrap(width=40)

description2 <-
  "7 of the 16 Horror Movies with the biggest profit were released in 1999 or 2000 marking the catalyzation of a decade long growth in the popularity of Horror Movies" |> 
  str_wrap(width=40)

description3 <-
  "Number of Horror Movies released in 2020 drastically decreases, likely due to COVID-19. The ability to make movies and the number of possible audience members decreased." |> 
  str_wrap(width=40)

plot_circle_purple <- horror_new |>
  group_by(release_year) |>
  summarise(count = n()) |>
  filter(release_year == 2009 | release_year == 2010)

plot_circle_blue <- horror_new |>
  group_by(release_year) |>
  summarise(count = n()) |>
  filter(release_year == 1999 | release_year == 2000)

plot_circle_black <- horror_new |>
  group_by(release_year) |>
  summarise(count = n()) |>
  filter(release_year == 2019 | release_year == 2020)

horror_new |>
  group_by(release_year) |>
  summarise(count = n()) |>
  ggplot(aes(x = release_year, y = count)) +
  geom_point(size = 3) +
  geom_point(data = plot_circle_purple,
             pch=21,
             size=8,
             colour="purple") +
  geom_point(data = plot_circle_blue,
             pch=21,
             size=8,
             colour="deepskyblue4") +
   geom_point(data = plot_circle_black,
             pch=21,
             size=8,
             colour="black") +
  annotate(
    "label",
    x = 2000,
    y = 67,
    label = description1,
    alpha = 0.6,
    size = 5,
    color = "purple"
  ) +
annotate(
    "label",
    x = 1995,
    y = 40,
    label = description2,
    alpha = 0.6,
    size = 5,
    color = "deepskyblue4"
  ) +
geom_ellipse(aes(x0 = 2019.6, y0 = 30.7, a = 11.3, b = 1, angle =  -1.45 * pi / 3), color = "black") +
  annotate(
    "label",
    x = 2012,
    y = 20,
    label = description3,
    alpha = 0.8,
    size = 5
  ) +
  labs(title = "How the number of horror movies launched for theatrical release changed over time",
       subtitle = "From 1980-2020",
       x = "Year",
       y = "Number of Horror Movies",
       color = "Language") +
theme(
  legend.key.size = unit(3, 'cm'), #change legend key size
  legend.key.height = unit(3, 'cm'), #change legend key height
  legend.key.width = unit(3, 'cm'),
  plot.title = element_text(size=18),
  plot.subtitle = element_text(size=18),
  axis.title=element_text(size=14)) +
scale_color_discrete(labels=c('English', 'Other'))

```

```{r}

description1 <-
  "9/11- Terrorist crash a plane into the World Trade Center. Questions about American security arise" |> 
  str_wrap(width=40)

description2 <-
  "The stock market crashes in 2009. Questions about American economic security arise." |> 
  str_wrap(width=40)

horror_new |>
  mutate(en_language = ifelse(original_language == "en", "en", "non-en")) |>
  group_by(release_year, en_language) |>
  summarise(count = n()) |>
  ggplot(aes(x = release_year, y = count, color = en_language)) +
  geom_point() +
  geom_line() +
  geom_smooth(se = FALSE) +
  geom_segment(x = 2001, xend = 2001, y = -5, yend = 27, col = "black", linewidth = 1.5) +
  geom_segment(x = 2009, xend = 2009, y = -5, yend = 45, col = "black", linewidth = 1.5) +
  annotate(
    "label",
    x = 1995,
    y = 35,
    label = description1,
    alpha = 0.6,
    size = 5
  ) +
  annotate(
    "label",
    x = 2015.5,
    y = 51,
    label = description2,
    alpha = 0.6,
    size = 5
  ) +
  labs(title = "Uncertainty and Anxiety- How Horror Flicks Popularity Correlates with a Need for an Outlet of Fears",
       x = "Year",
       y = "Total Number of Movies for Theatrical Release",
       color = "Language") +
theme(
  legend.key.size = unit(3, 'cm'), #change legend key size
  legend.key.height = unit(3, 'cm'), #change legend key height
  legend.key.width = unit(3, 'cm'),
  plot.title = element_text(size=18),
  axis.title=element_text(size=14)) +
scale_color_discrete(labels=c('English', 'Other'))
```

```{r}

horror_summary <- horror_new |>
  group_by(release_year) |>
  summarise(total_budget = sum(adj_budget2020),
            total_profit = sum(adj_profit2020),
            count = n())



p1 <- horror_summary |>
  ggplot(aes(x = release_year, y = total_budget)) +
  #geom_point(aes(col = "Total Budget"), alpha=0.1) +
  geom_line(aes(col = "Total Budget"), alpha=0.1, size=1) +
  geom_smooth(se = FALSE, aes(col = "Total Budget"), size=3, span=0.4) +
  #geom_point(aes(y = total_profit, col = "Total Profit"), alpha=0.1) +
  geom_line(aes(y = total_profit, col = "Total Profit"), alpha=0.1, size=1) +
  geom_smooth(aes(y = total_profit, col = "Total Profit"),
              se = FALSE, size=3, span=0.4) +
  scale_color_manual(name='',
                     breaks=c('Total Profit', 'Total Budget'),
                     values=c('Total Profit'='red', 'Total Budget'='blue')) +
  scale_size(range = c(1, 15)) +
  theme_minimal() +
  theme(legend.position = c(0.1, 0.9),
        legend.spacing.y = unit(0.2, 'cm'),
        #legend.key.size = unit(3, 'cm'), #change legend key size
        #legend.key.height = unit(3, 'cm'), #change legend key height
        #legend.key.width = unit(3, 'cm'),
        plot.title = element_text(size=18),
        plot.subtitle = element_text(size=14),
        axis.title=element_text(size=14),
        axis.title.x = element_blank()) +
  labs(
    #title = "Starting in 2007, Movie Directors realized they didn't need big #budgets to garner an audience for their movies",
       y = "Dollars (2020 adjusted)",
       #subtitle = "While total budget decreased, total profit continued to #increase"
       )



p2 <- horror_summary |>
  ggplot(aes(x = release_year, y = count)) +
  geom_col() +
  theme_minimal()  +
  labs(y = "Number of movies",
       x = "Year"
       )

grid.arrange(p1, p2, nrow=2, heights=c(4, 2))
grid.rect(width = .99, height = .99, gp = gpar(lwd = 2, col = "gray", fill = NA))

```

```{r}
ggplot(horror_new, aes(x = release_year, y = prop_profit)) +
  geom_point() +
  geom_smooth(se = FALSE)
```

```{r}
horror_new |>
  mutate(size = case_when(adj_budget2020 > 10000000 ~ "huge",
                          adj_budget2020 > 1000000 ~ "big",
                          adj_budget2020 > 100000 ~ "medium",
                          TRUE ~ "small")) |>
  filter(release_year >= 2000, size!= "small") |>
  group_by(release_year, size) |>
  summarise(count = n(), total = sum(adj_budget2020)) |>
  ggplot(aes(x=release_year, y = count, color=size, fill=size)) +
  geom_col()
  
```


```{r}
horror_new2 <- horror_new |>
  separate_rows(genre_names, sep = ",\\s+")

#popular genres
popular_genre_names <- horror_new2 |>
  group_by(genre_names) |>
  summarise(n = n()) |>
  mutate(prop = n / sum(n)) |>
  arrange(desc(prop)) |>
  head(6)
```


```{r}
horror_new2 |>
  filter(genre_names %in% popular_genre_names$genre_names) |>
  filter(genre_names != "Horror") |>
  ggplot(aes(x = genre_names,
             y = adj_profit2020)) +
  geom_boxplot() + 
  coord_flip(ylim = c(-1e8, 1e8)) 
```

```{r}
horror_new2 |>
  group_by(release_year) |>
  summarise(meanruntime = mean(runtime)) |>
  ggplot(aes(x = release_year,
             y = meanruntime)) + 
  geom_point() + 
  geom_smooth() +
  coord_cartesian(ylim = c(80, 115))
```

```{r}
horror_new2 |>
  ggplot(aes(x = runtime,
             y = prop_profit)) + 
  geom_point() + 
  geom_smooth() +
  scale_x_continuous(limits = c(50, 200))
```

```{r}
horror_new2 |>
  filter(genre_names %in% popular_genre_names$genre_names,
         genre_names != "Horror") |>
  ggplot(aes(x = runtime)) +
  geom_histogram() +
  facet_wrap(~ genre_names)
```


## Plots

## Plot and text

::: columns ::: {.column width="50%"} - Some text - goes here :::

::: {.column width="50%"}

# A new section...

## Tables

If you want to generate a table, make sure it is in the HTML format (instead of Markdown or other formats), e.g.,

## Images

## Math Expressions {.smaller}

You can write LaTeX math expressions inside a pair of dollar signs, e.g. \$\alpha+\beta\$ renders $\alpha+\beta$. You can use the display style with double dollar signs:

    $$\bar{X}=\frac{1}{n}\sum_{i=1}^nX_i$$

$$\bar{X}=\frac{1}{n}\sum_{i=1}^nX_i$$

Limitations:

1.  The source code of a LaTeX math expression must be in one line, unless it is inside a pair of double dollar signs, in which case the starting `$$` must appear in the very beginning of a line, followed immediately by a non-space character, and the ending `$$` must be at the end of a line, led by a non-space character;

2.  There should not be spaces after the opening `$` or before the closing `$`.

# Wrap up

## Feeling adventurous?

-   You are welcomed to use the default styling of the slides. In fact, that's what I expect majority of you will do. You will differentiate yourself with the content of your presentation.

-   But some of you might want to play around with slide styling. Some solutions for this can be found at https://quarto.org/docs/presentations/revealjs.
